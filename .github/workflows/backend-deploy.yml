name: Reusable Backend Deploy Workflow

on:
  workflow_call:
    secrets:
      TELEGRAM_BOT_TOKEN:
        required: true
      TELEGRAM_CHAT_ID_1:
        required: true
      TELEGRAM_CHAT_ID_2:
        required: true
      TELEGRAM_CHAT_IDS:
        required: false
        description: 'Comma-separated list of additional chat IDs'

jobs:
  deploy:
    runs-on: [self-hosted]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate deployment permissions
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        EVENT_NAME="${{ github.event_name }}"
        
        echo "Branch: $BRANCH_NAME"
        echo "Event: $EVENT_NAME"
        
        if [ "$EVENT_NAME" = "push" ]; then
          if [ "$BRANCH_NAME" != "dev" ]; then
            echo "‚ùå Auto-deploy only allowed for 'dev' branch"
            exit 1
          fi
          echo "TARGET_ENV=dev" >> $GITHUB_ENV
          echo "‚úÖ Auto-deploy to dev environment"
          
        elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
          if [ "$BRANCH_NAME" != "main" ]; then
            echo "‚ùå Manual deploy only allowed from 'main' branch"
            echo "‚ùå Current branch: $BRANCH_NAME"
            echo "‚ùå For dev deployment, push to 'dev' branch instead"
            exit 1
          fi
          
          TARGET="${{ github.event.inputs.environment || 'prod' }}"
          if [[ "$TARGET" != "prod" && "$TARGET" != "test" ]]; then
            echo "‚ùå Invalid environment: $TARGET"
            exit 1
          fi
          
          echo "TARGET_ENV=$TARGET" >> $GITHUB_ENV
          echo "‚úÖ Manual deploy to $TARGET environment"
          
        else
          echo "‚ùå Unsupported event: $EVENT_NAME"
          exit 1
        fi
        
        echo "‚úÖ Validation passed"
    
    - name: Deploy to server
      run: |
        set -e
        
        ENV="${{ env.TARGET_ENV }}"
        API_DIR="/home/${ENV}/api"
        SERVICE_NAME="${ENV}-api"
        
        echo "üéØ Deploying to ${ENV} environment..."
        echo "üìÅ API Directory: ${API_DIR}"
        echo "üîß Service: ${SERVICE_NAME}"
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        echo "‚èπÔ∏è Stopping ${SERVICE_NAME} service..."
        sudo systemctl stop ${SERVICE_NAME}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
        echo "üì• Updating code for ${ENV} environment..."
        
        TEMP_DIR="/tmp/deploy_${ENV}_$(date +%s)"
        mkdir -p ${TEMP_DIR}
        cp -r app/ requirements.txt alembic.ini alembic/ ${TEMP_DIR}/ 2>/dev/null || true
        
        sudo -u ${ENV} bash -c "
          cd ${API_DIR}
          if [ -d app ]; then
            cp -r app app.backup.\$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
          fi
          cp -r ${TEMP_DIR}/* ./
        "
        
        rm -rf ${TEMP_DIR}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        echo "üì¶ Installing dependencies as user ${ENV}..."
        sudo -u ${ENV} bash -c "
          cd ${API_DIR}
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        "
        
        # –ù–∞–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        echo "üîÑ Running migrations as user ${ENV}..."
        sudo -u ${ENV} bash -c "
          cd ${API_DIR}
          source venv/bin/activate
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö
          echo 'üìã Checking for model changes...'
          if alembic check 2>/dev/null; then
            echo '‚úÖ No model changes detected'
          else
            echo 'üÜï Model changes detected, generating migration...'
            alembic revision --autogenerate -m \"Auto-generated migration \$(date +'%Y%m%d_%H%M%S')\"
          fi
          
          echo '‚¨ÜÔ∏è Applying migrations...'
          alembic upgrade head
        "
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        echo "‚ñ∂Ô∏è Starting ${SERVICE_NAME} service..."
        sudo systemctl start ${SERVICE_NAME}
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        sleep 5
        echo "üîç Checking service status..."
        sudo systemctl status ${SERVICE_NAME} --no-pager
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if sudo systemctl is-active --quiet ${SERVICE_NAME}; then
          echo "‚úÖ ${SERVICE_NAME} is running successfully!"
          echo "DEPLOY_STATUS=success" >> $GITHUB_ENV
        else
          echo "‚ùå ${SERVICE_NAME} failed to start!"
          echo "üìã Service logs:"
          sudo journalctl -u ${SERVICE_NAME} --no-pager -n 50
          echo "DEPLOY_STATUS=failed" >> $GITHUB_ENV
          exit 1
        fi
        
        echo "üöÄ Deployment completed successfully!"
        
    - name: Send Telegram notifications
      if: always()
      run: |
        STATUS_EMOJI="‚úÖ"
        STATUS_TEXT="deployed successfully"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS_EMOJI="‚ùå"
          STATUS_TEXT="deployment failed"
        fi
        
        MESSAGE="${STATUS_EMOJI} *Backend API (${{ env.TARGET_ENV }})* ${STATUS_TEXT}!

        üåø *Branch:* \`${{ github.ref_name }}\`
        üë§ *Author:* ${{ github.actor }}
        üì¶ *Repository:* ${{ github.repository }}
        üîó *Commit:* \`${{ github.sha }}\`
        ‚è∞ *Time:* $(date '+%Y-%m-%d %H:%M:%S')
        
        üîç <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Ç—ã
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID_1 }}" \
          -d "text=${MESSAGE}" \
          -d "parse_mode=Markdown"
          
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID_2 }}" \
          -d "text=${MESSAGE}" \
          -d "parse_mode=Markdown"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        CHAT_IDS="${{ secrets.TELEGRAM_CHAT_IDS }}"
        if [ -n "$CHAT_IDS" ]; then
          IFS=',' read -ra CHAT_ARRAY <<< "$CHAT_IDS"
          for chat_id in "${CHAT_ARRAY[@]}"; do
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            chat_id=$(echo "$chat_id" | tr -d ' ')
            if [ -n "$chat_id" ]; then
              echo "Sending to additional chat: $chat_id"
              curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
                -d "chat_id=${chat_id}" \
                -d "text=${MESSAGE}" \
                -d "parse_mode=Markdown"
            fi
          done
        fi
