name: Reusable Backend Deploy Workflow

on:
  workflow_call:
    secrets:
      TELEGRAM_BOT_TOKEN:
        required: true
      TELEGRAM_CHAT_ID_1:
        required: true
      TELEGRAM_CHAT_ID_2:
        required: true
      TELEGRAM_CHAT_IDS:
        required: false
        description: 'Comma-separated list of additional chat IDs'

jobs:
  deploy:
    runs-on: [self-hosted]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate deployment permissions
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        EVENT_NAME="${{ github.event_name }}"
        
        echo "Branch: $BRANCH_NAME"
        echo "Event: $EVENT_NAME"
        
        # –ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê - –ù–ï –ú–û–ì–£–¢ –ë–´–¢–¨ –ò–ó–ú–ï–ù–ï–ù–´ –†–ê–ó–†–ê–ë–û–ú:
        # 1. Push –≤ dev - –∞–≤—Ç–æ–º–∞—Ç–æ–º –¥–µ–ø–ª–æ–∏–º –≤ dev
        # 2. Manual dispatch - –¢–û–õ–¨–ö–û –∏–∑ main –≤ prod/test
        # 3. –ù–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        
        if [ "$EVENT_NAME" = "push" ]; then
          if [ "$BRANCH_NAME" != "dev" ]; then
            echo "‚ùå Auto-deploy only allowed for 'dev' branch"
            exit 1
          fi
          echo "TARGET_ENV=dev" >> $GITHUB_ENV
          echo "‚úÖ Auto-deploy to dev environment"
          
        elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
          if [ "$BRANCH_NAME" != "main" ]; then
            echo "‚ùå Manual deploy only allowed from 'main' branch"
            echo "‚ùå Current branch: $BRANCH_NAME"
            echo "‚ùå For dev deployment, push to 'dev' branch instead"
            exit 1
          fi
          
          # –î–ª—è manual dispatch –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ input'—É
          TARGET="${{ github.event.inputs.environment || 'prod' }}"
          if [[ "$TARGET" != "prod" && "$TARGET" != "test" ]]; then
            echo "‚ùå Invalid environment: $TARGET"
            exit 1
          fi
          
          echo "TARGET_ENV=$TARGET" >> $GITHUB_ENV
          echo "‚úÖ Manual deploy to $TARGET environment"
          
        else
          echo "‚ùå Unsupported event: $EVENT_NAME"
          exit 1
        fi
        
        echo "‚úÖ Validation passed"
    
    - name: Deploy to server
      run: |
        set -e
        
        ENV="${{ env.TARGET_ENV }}"
        API_DIR="/home/${ENV}"
        SERVICE_NAME="${ENV}-api"
        
        echo "üéØ Deploying to ${ENV} environment..."
        echo "üìÅ API Directory: ${API_DIR}"
        echo "üîß Service: ${SERVICE_NAME}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ—ë
        if [ ! -d "${API_DIR}" ]; then
          echo "‚ùå Directory ${API_DIR} does not exist"
          exit 1
        fi
        
        echo "üìÅ Changing to directory: ${API_DIR}"
        cd ${API_DIR}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        echo "üìç Current directory: $(pwd)"
        echo "üìã Directory contents:"
        ls -la
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        echo "‚èπÔ∏è Stopping ${SERVICE_NAME} service..."
        sudo systemctl stop ${SERVICE_NAME}
        
        # –ë—ç–∫–∞–ø–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        if [ -d "backup" ]; then
          rm -rf backup
        fi
        mkdir -p backup
        cp -r app/ backup/ 2>/dev/null || true
        echo "üì¶ Backup created"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
        echo "üì• Updating code..."
        if [ -d ".git" ]; then
          git fetch origin
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }}
        else
          echo "‚ö†Ô∏è No git repository found in ${API_DIR}"
          echo "üìã Available files:"
          ls -la
        fi
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        echo "üì¶ Installing dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # –ù–∞–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        echo "üîÑ Running migrations..."
        source venv/bin/activate
        alembic upgrade head
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        echo "‚ñ∂Ô∏è Starting ${SERVICE_NAME} service..."
        sudo systemctl start ${SERVICE_NAME}
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        sleep 5
        echo "üîç Checking service status..."
        sudo systemctl status ${SERVICE_NAME} --no-pager
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if sudo systemctl is-active --quiet ${SERVICE_NAME}; then
          echo "‚úÖ ${SERVICE_NAME} is running successfully!"
          echo "DEPLOY_STATUS=success" >> $GITHUB_ENV
        else
          echo "‚ùå ${SERVICE_NAME} failed to start!"
          echo "üìã Service logs:"
          sudo journalctl -u ${SERVICE_NAME} --no-pager -n 50
          echo "DEPLOY_STATUS=failed" >> $GITHUB_ENV
          exit 1
        fi
        
        echo "üöÄ Deployment completed successfully!"
        
    - name: Send Telegram notifications
      if: always()
      run: |
        STATUS_EMOJI="‚úÖ"
        STATUS_TEXT="deployed successfully"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS_EMOJI="‚ùå"
          STATUS_TEXT="deployment failed"
        fi
        
        MESSAGE="${STATUS_EMOJI} Backend API (${{ env.TARGET_ENV }}) ${STATUS_TEXT}! Branch: ${{ github.ref_name }}, Author: ${{ github.actor }}, Repository: ${{ github.repository }}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Ç—ã
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID_1 }}" \
          -d "text=${MESSAGE}"
          
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID_2 }}" \
          -d "text=${MESSAGE}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        CHAT_IDS="${{ secrets.TELEGRAM_CHAT_IDS }}"
        if [ -n "$CHAT_IDS" ]; then
          IFS=',' read -ra CHAT_ARRAY <<< "$CHAT_IDS"
          for chat_id in "${CHAT_ARRAY[@]}"; do
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            chat_id=$(echo "$chat_id" | tr -d ' ')
            if [ -n "$chat_id" ]; then
              echo "Sending to additional chat: $chat_id"
              curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
                -d "chat_id=${chat_id}" \
                -d "text=${MESSAGE}"
            fi
          done
        fi
