name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      project_type:
        required: true
        type: string
        description: 'Project type: admin or user'
      node_version:
        required: false
        type: string
        default: '20.17.0'
        description: 'Node.js version'
    secrets:
      TELEGRAM_BOT_TOKEN:
        required: true
      TELEGRAM_CHAT_ID_1:
        required: true
      TELEGRAM_CHAT_ID_2:
        required: true
      DEPLOY_BASE_PATH:
        required: true
      PRODUCTION_API_URL:
        required: true
      DEV_API_URL:
        required: true
      TEST_API_URL:
        required: true
      ALLOWED_BRANCHES:
        required: true

jobs:
  deploy:
    runs-on: [self-hosted]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate inputs
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º project_type (—Ä–∞–±–æ—Ç–∞–µ—Ç)
        PROJECT_TYPE="${{ inputs.project_type }}"
        case "$PROJECT_TYPE" in
          "admin"|"user")
            echo "‚úÖ Valid project type: $PROJECT_TYPE"
            ;;
          *)
            echo "‚ùå Invalid project_type: $PROJECT_TYPE"
            exit 1
            ;;
        esac
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ç–æ–∫ –±–µ–∑ secrets
        BRANCH_NAME="${{ github.ref_name }}"
        EVENT_NAME="${{ github.event_name }}"
        
        echo "Branch: $BRANCH_NAME"
        echo "Event: $EVENT_NAME"
        
        # –ê–≤—Ç–æ–¥–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ –¥–ª—è dev
        if [ "$EVENT_NAME" = "push" ] && [ "$BRANCH_NAME" != "dev" ]; then
          echo "‚ùå Auto-deploy only allowed for dev branch"
          exit 1
        fi
        
        echo "‚úÖ Validation passed"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '${{ inputs.node_version }}'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Set environment variables
      run: |
        PROJECT_TYPE="${{ inputs.project_type }}"
        BASE_PATH="${{ secrets.DEPLOY_BASE_PATH }}"
        
        # –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        case "${{ github.ref_name }}" in
          "main")
            echo "VITE_API_URL=${{ secrets.PRODUCTION_API_URL }}" > .env
            DEPLOY_PATH="$BASE_PATH/production/$PROJECT_TYPE"
            ENVIRONMENT="production"
            ;;
          "dev")
            echo "VITE_API_URL=${{ secrets.DEV_API_URL }}" > .env
            DEPLOY_PATH="$BASE_PATH/dev/$PROJECT_TYPE"
            ENVIRONMENT="development"
            ;;
          "test")
            echo "VITE_API_URL=${{ secrets.TEST_API_URL }}" > .env
            DEPLOY_PATH="$BASE_PATH/test/$PROJECT_TYPE"
            ENVIRONMENT="test"
            ;;
          *)
            echo "‚ùå Unknown branch: ${{ github.ref_name }}"
            exit 1
            ;;
        esac
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
        if [[ "$DEPLOY_PATH" != "$BASE_PATH"* ]]; then
          echo "‚ùå Invalid deploy path: $DEPLOY_PATH"
          exit 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if [ ! -d "$DEPLOY_PATH" ]; then
          echo "‚ùå Deploy directory does not exist: $DEPLOY_PATH"
          exit 1
        fi
        
        echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_ENV
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
        echo "PROJECT_TYPE=$PROJECT_TYPE" >> $GITHUB_ENV
        
        echo "‚úÖ Deploy target: $ENVIRONMENT -> $DEPLOY_PATH"
    
    - name: Build project
      run: |
        echo "üèóÔ∏è Building ${{ env.PROJECT_TYPE }} for ${{ env.ENVIRONMENT }}..."
        yarn build
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ build —Å–æ–∑–¥–∞–ª—Å—è
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed - dist directory not found"
          exit 1
        fi
        
        echo "‚úÖ Build completed successfully"
    
    - name: Deploy to server
      run: |
        echo "üöÄ Deploying to ${{ env.DEPLOY_PATH }}..."
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
        if [[ "${{ env.DEPLOY_PATH }}" != "${{ secrets.DEPLOY_BASE_PATH }}"* ]]; then
          echo "‚ùå Security check failed: invalid deploy path"
          exit 1
        fi
        
        # –°–æ–∑–¥–∞–µ–º backup
        if [ -d "${{ env.DEPLOY_PATH }}" ] && [ "$(ls -A ${{ env.DEPLOY_PATH }})" ]; then
          BACKUP_DIR="${{ env.DEPLOY_PATH }}.backup.$(date +%Y%m%d_%H%M%S)"
          echo "üì¶ Creating backup: $BACKUP_DIR"
          cp -r "${{ env.DEPLOY_PATH }}" "$BACKUP_DIR"
        fi
        
        # –î–µ–ø–ª–æ–∏–º
        rm -rf ${{ env.DEPLOY_PATH }}/*
        cp -r dist/* ${{ env.DEPLOY_PATH }}/
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏—Å—å
        if [ ! -f "${{ env.DEPLOY_PATH }}/index.html" ]; then
          echo "‚ùå Deploy failed - index.html not found"
          exit 1
        fi
        
        echo "‚úÖ Deploy completed successfully"
        
    - name: Send Telegram notification
      if: always()
      run: |
        STATUS_EMOJI="‚úÖ"
        STATUS_TEXT="deployed successfully"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS_EMOJI="‚ùå"
          STATUS_TEXT="deployment failed"
        fi
        
        MESSAGE="${STATUS_EMOJI} *Astrum ${{ env.PROJECT_TYPE }} (${{ env.ENVIRONMENT }})* ${STATUS_TEXT}!

        üåø *Branch:* \`${{ github.ref_name }}\`
        üë§ *Author:* ${{ github.actor }}
        üì¶ *Repository:* ${{ github.repository }}
        üîó *Commit:* \`${{ github.sha }}\`
        ‚è∞ *Time:* $(date '+%Y-%m-%d %H:%M:%S')
        
        üîç <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
        
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID_1 }}" \
          -d "text=${MESSAGE}"
          
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID_2 }}" \
          -d "text=${MESSAGE}"
